"use client"

import { use, useEffect, useState } from "react"
import Link from "next/link"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { toast } from "sonner"
import { ArrowLeft, Calendar, Edit, MapPin, Plus, Trash2, Trophy, Users, Star, Award, Info } from "lucide-react"
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { useRouter } from "next/navigation"
import { MatchesList } from "@/components/matches-list"
import { PlayersList } from "@/components/players-list"
import { useAuth } from "@/app/hooks/use-auth"
import { Input } from "@/components/ui/input"
import { Loader2 } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface Player {
  id: string
  name: string
  email: string | null
  phone: string | null
  avatar: string | null
  initials: string | null
  level: number
  bio: string | null
  rating: number
  wins: number
  losses: number
}

interface Match {
  id: string
  tournamentId: string
  player1Id: string
  player2Id: string
  player1Score: number | null
  player2Score: number | null
  round: number
  status: string
  date: string | null
  player1: Player
  player2: Player
  groupName?: string
  stage?: string
  bestOfThree?: boolean
}

interface Tournament {
  id: string
  name: string
  description: string | null
  startDate: string
  endDate: Date | null
  status: string
  format: string
  players: Player[]
  matches: Match[]
  createdAt: Date
  updatedAt: Date
  location?: string
}

export default function TournamentPage({ params }: { params: Promise<{ id: string }> }) {
  const router = useRouter()
  const [tournament, setTournament] = useState<Tournament | null>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState("matches")
  const [deletePassword, setDeletePassword] = useState("")
  const [isDeleting, setIsDeleting] = useState(false)
  const [deleteError, setDeleteError] = useState("")
  const { isAdmin } = useAuth()
  const id = use(params).id
  const [currentRound, setCurrentRound] = useState<number>(1)
  const [selectedTab, setSelectedTab] = useState<string>('matches')
  
  // Group matches by round
  const groupMatches = tournament?.matches.filter(match => match.stage === 'group') || []
  const knockoutMatches = tournament?.matches.filter(match => match.stage === 'knockout') || []
  
  // Organize group matches by round
  const groupMatchesByRound: Record<number, Match[]> = {}
  groupMatches.forEach(match => {
    const round = match.round || 1
    if (!groupMatchesByRound[round]) {
      groupMatchesByRound[round] = []
    }
    groupMatchesByRound[round].push(match)
  })
  
  // Check if all group matches are completed
  const isAllGroupMatchesCompleted = groupMatches.length > 0 && 
    groupMatches.every(match => match.status === 'completed')

  useEffect(() => {
    // בדיקה אם יש פרמטר tab בכתובת
    if (typeof window !== 'undefined') {
      const searchParams = new URLSearchParams(window.location.search)
      const tabParam = searchParams.get('tab')
      if (tabParam) {
        setActiveTab(tabParam)
      }
    }

    // טעינת פרטי הטורניר
    loadTournament()
  }, [id])  // החזרת התלות ב-id

  const loadTournament = async () => {
    try {
      setLoading(true)
      console.log("Starting to load tournament with ID:", id)
      
      try {
        console.log("Fetching tournament data from API...")
        const response = await fetch(`/api/tournaments/${id}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
          cache: 'no-store'
        })
        
        console.log("API response status:", response.status, response.statusText)
        
        if (!response.ok) {
          throw new Error(`Error: ${response.status} - ${response.statusText}`)
        }
        
        const data = await response.json()
        
        // הוספת לוג לדיבאג
        console.log("Tournament data received:", data ? "Data exists" : "No data")
        if (data) {
          console.log("Tournament ID:", data.id)
          console.log("Tournament name:", data.name)
          console.log("Tournament status:", data.status)
          console.log("Tournament format:", data.format)
          console.log("Players count:", data.players?.length || 0)
          console.log("Matches count:", data.matches?.length || 0)
        }
        
        if (!data || data.error) {
          console.error("Error in tournament data:", data?.error || "Tournament not found")
          setLoading(false)
          toast.error(data?.error || "הטורניר לא נמצא", {
            duration: 3000,
            position: "top-center",
          })
          // השהייה של 3 שניות לפני הניתוב
          setTimeout(() => {
            router.push('/tournaments')
          }, 3000)
          return
        }
        
        // וידוא שכל השדות הנדרשים קיימים
        if (!data.id || !data.name || !data.players || !data.matches) {
          console.error("Missing required fields in tournament data")
          setLoading(false)
          toast.error("נתוני הטורניר חסרים או שגויים", {
            duration: 3000,
            position: "top-center",
          })
          setTimeout(() => {
            router.push('/tournaments')
          }, 3000)
          return
        }
        
        // וידוא שהשחקנים והמשחקים הם מערכים
        if (!Array.isArray(data.players) || !Array.isArray(data.matches)) {
          console.error("Players or matches are not arrays")
          setLoading(false)
          toast.error("נתוני הטורניר בפורמט שגוי", {
            duration: 3000,
            position: "top-center",
          })
          setTimeout(() => {
            router.push('/tournaments')
          }, 3000)
          return
        }
        
        // Make sure the data conforms to our Tournament interface
        const formattedTournament = {
          ...data,
          startDate: data.startDate ? data.startDate.toString() : '',
          endDate: data.endDate,
          createdAt: data.createdAt,
          updatedAt: data.updatedAt,
          // וידוא שהשדות הם מהטיפוס הנכון
          players: Array.isArray(data.players) ? data.players : [],
          matches: Array.isArray(data.matches) ? data.matches : []
        } as Tournament
        
        console.log("Tournament data formatted successfully")
        setTournament(formattedTournament)
        setLoading(false)
      } catch (fetchError) {
        console.error("Network error:", fetchError)
        console.error("Error details:", fetchError instanceof Error ? fetchError.message : String(fetchError))
        setLoading(false)
        toast.error("שגיאת רשת בטעינת הטורניר. נסה שוב מאוחר יותר.", {
          duration: 3000,
          position: "top-center",
        })
        
        // השהייה של 3 שניות לפני הניתוב במקרה של שגיאת רשת
        setTimeout(() => {
          router.push('/tournaments')
        }, 3000)
      }
    } catch (error) {
      setLoading(false)
      console.error("Error loading tournament:", error)
      
      // בדיקה אם השגיאה היא שהטורניר לא נמצא
      const errorMessage = error instanceof Error ? error.message : String(error)
      if (errorMessage.includes("not found") || errorMessage.includes("לא נמצא") || errorMessage.includes("404")) {
        toast.error("הטורניר לא נמצא", {
          duration: 3000,
          position: "top-center",
        })
      } else {
        toast.error("שגיאה בטעינת פרטי הטורניר", {
          duration: 3000,
          position: "top-center",
        })
      }
      
      // השהייה של 3 שניות לפני הניתוב
      setTimeout(() => {
        router.push('/tournaments')
      }, 3000)
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "draft":
        return <Badge className="bg-gray-500">טיוטה</Badge>
      case "active":
        return <Badge className="bg-green-500">פעיל</Badge>
      case "completed":
        return <Badge className="bg-blue-500">הסתיים</Badge>
      default:
        return null
    }
  }

  const getFormatLabel = (format: string, rounds?: string) => {
    switch (format) {
      case "knockout":
        return "נוק-אאוט"
      case "league":
        return rounds === "double" ? "ליגה (סיבוב כפול)" : "ליגה (סיבוב יחיד)"
      case "groups_knockout":
        return "בתים + נוק-אאוט"
      default:
        return format
    }
  }

  const handleGenerateKnockout = async () => {
    if (!tournament) return;
    
    try {
      // Check if we're in browser environment
      if (typeof window === 'undefined') {
        toast.error("פעולה זו זמינה רק בדפדפן", {
          id: "knockout-loading",
          duration: 3000,
          position: "top-center",
        });
        return;
      }
      
      // Check if user is authenticated and is admin
      const isAdmin = localStorage.getItem('isAdmin') === 'true';
      if (!isAdmin) {
        toast.error("רק מנהל יכול ליצור שלב נוק-אאוט", {
          id: "knockout-loading",
          duration: 3000,
          position: "top-center",
        });
        router.push('/login'); // Redirect to login
        return;
      }
    
      toast.loading("מייצר שלב נוק-אאוט...", {
        id: "knockout-loading",
        duration: 3000,
        position: "top-center",
      });
      
      // Get admin token from localStorage
      const adminToken = localStorage.getItem('adminToken');
      
      if (!adminToken) {
        toast.error("אין הרשאות מנהל. נא להתחבר מחדש.", {
          id: "knockout-loading",
          duration: 3000,
          position: "top-center",
        });
        return;
      }
      
      console.log('Sending request with admin token:', adminToken);
      
      // Try using both header and query parameter for maximum compatibility
      const response = await fetch(`/api/tournaments/${tournament.id}/generate-knockout?token=${encodeURIComponent(adminToken)}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${adminToken}`,
        }
      });
      
      console.log('Response status:', response.status);
      
      // Handle non-JSON responses
      const contentType = response.headers.get("content-type");
      if (!contentType || !contentType.includes("application/json")) {
        toast.error("שגיאה בתגובת השרת - לא התקבל JSON", {
          id: "knockout-loading",
          duration: 3000,
          position: "top-center",
        });
        console.error("Server returned non-JSON response:", await response.text());
        return;
      }
      
      let data;
      try {
        data = await response.json();
      } catch (jsonError) {
        console.error('Error parsing JSON response:', jsonError);
        toast.error("שגיאה בתגובת השרת - JSON לא תקין", {
          id: "knockout-loading",
          duration: 3000,
          position: "top-center",
        });
        return;
      }
      
      if (!response.ok) {
        // Special handling for authentication errors
        if (response.status === 401) {
          console.error("Authentication failed. Status:", response.status);
          toast.error("אין הרשאות מנהל. יש להתחבר כמנהל כדי ליצור שלב נוק-אאוט.", {
            id: "knockout-loading",
            duration: 5000,
            position: "top-center",
          });
          
          // Clear any stale auth data
          localStorage.removeItem('isAuthenticated');
          localStorage.removeItem('isAdmin');
          localStorage.removeItem('adminToken');
          
          // Redirect to login after a short delay
          setTimeout(() => {
            router.push('/login');
          }, 1500);
          
          return;
        }
        
        // Handle other errors
        toast.error(data?.error || "שגיאה ביצירת שלב הנוק-אאוט", {
          id: "knockout-loading",
          duration: 3000,
          position: "top-center",
        });
        if (data?.details) {
          console.error("Server error details:", data.details);
        }
        return;
      }
      
      toast.success("שלב הנוק-אאוט נוצר בהצלחה", {
        id: "knockout-loading",
        duration: 3000,
        position: "top-center",
      });
      
      // Reload the tournament data to show the new knockout matches
      await loadTournament();
      
      // Switch to the matches tab
      setActiveTab("matches");
    } catch (error) {
      console.error("Error generating knockout stage:", error);
      toast.error("שגיאה בלתי צפויה ביצירת שלב הנוק-אאוט", {
        id: "knockout-loading",
        duration: 3000,
        position: "top-center",
      });
    }
  };

  if (loading) {
    return <div className="container mx-auto px-4 py-8 space-y-6">
      <div className="flex flex-col items-center justify-center py-12">
        <div className="w-16 h-16 border-4 border-blue-400 border-t-transparent rounded-full animate-spin"></div>
        <p className="mt-4 text-lg text-blue-600">טוען פרטי טורניר...</p>
      </div>
    </div>
  }

  if (!tournament) {
    return <div className="container mx-auto px-4 py-8 space-y-6">
      <div className="flex flex-col items-center justify-center py-12">
        <div className="bg-red-50 border-2 border-red-200 rounded-lg p-6 text-center max-w-md">
          <h2 className="text-xl font-bold text-red-700 mb-2">הטורניר לא נמצא</h2>
          <p className="text-red-600 mb-4">לא הצלחנו למצוא את הטורניר המבוקש. יתכן שהוא נמחק או שהקישור שגוי.</p>
          <Link href="/tournaments">
            <Button
              variant="outline"
              size="sm"
              className="gap-2"
              aria-label="חזרה לרשימת הטורנירים"
            >
              <ArrowLeft className="h-4 w-4" />
              <span>חזרה</span>
            </Button>
          </Link>
        </div>
      </div>
    </div>
  }

  return (
    <div dir="rtl" className="container mx-auto py-6 space-y-6 bg-gradient-to-b from-blue-50 to-white min-h-screen">
      <div className="flex items-center gap-2">
        <Link href="/tournaments">
          <Button
            variant="outline"
            size="sm"
            className="gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>חזרה</span>
          </Button>
        </Link>
        <h1 className="text-2xl font-bold tracking-tight text-blue-700">{tournament.name}</h1>
        {getStatusBadge(tournament.status)}
        <div className="ml-auto flex items-center gap-2">
          {isAdmin && (
            <>
              <Button
                variant="outline"
                size="sm"
                className="border-blue-200 text-blue-700 hover:bg-blue-50"
                onClick={() => window.location.href = `/tournaments/${tournament.id}/edit`}
              >
                <Edit className="h-4 w-4 mr-2" />
                ערוך
              </Button>
              
              {tournament && tournament.format === 'groups_knockout' && (
                <Button
                  variant="outline"
                  size="sm"
                  className="border-green-200 text-green-700 hover:bg-green-50"
                  onClick={handleGenerateKnockout}
                >
                  <Trophy className="h-4 w-4 mr-2" />
                  צור שלב נוק-אאוט
                </Button>
              )}

              <Dialog>
                <DialogTrigger asChild>
                  <Button
                    variant="outline"
                    size="sm"
                    className="border-red-200 text-red-700 hover:bg-red-50"
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    מחק טורניר
                  </Button>
                </DialogTrigger>
                <DialogContent>
                  <DialogHeader>
                    <DialogTitle>אישור מחיקה</DialogTitle>
                    <DialogDescription>
                      האם אתה בטוח שברצונך למחוק את הטורניר הזה?
                      פעולה זו אינה ניתנת לביטול.
                    </DialogDescription>
                  </DialogHeader>
                  
                  <div className="space-y-4 py-2">
                    <div className="space-y-2">
                      <label htmlFor="admin-password" className="text-sm font-medium">
                        סיסמת מנהל
                      </label>
                      <Input
                        id="admin-password"
                        type="password"
                        placeholder="הזן סיסמת מנהל לאישור"
                        value={deletePassword}
                        onChange={(e) => setDeletePassword(e.target.value)}
                      />
                    </div>
                    
                    {deleteError && (
                      <div className="text-sm text-red-500">
                        {deleteError}
                      </div>
                    )}
                  </div>
                  
                  <DialogFooter className="gap-2 sm:justify-start">
                    <Button
                      type="button"
                      variant="destructive"
                      disabled={isDeleting}
                      onClick={async () => {
                        if (deletePassword !== '8891') {
                          setDeleteError("סיסמה שגויה. אנא נסה שנית.");
                          return;
                        }
                        
                        setIsDeleting(true);
                        setDeleteError("");
                        
                        try {
                          // השגת הטוקן המאוחסן
                          const adminToken = localStorage.getItem('adminToken') || `admin-${deletePassword}`;
                          
                          const response = await fetch(`/api/tournaments/${tournament.id}`, {
                            method: 'DELETE',
                            headers: {
                              'Content-Type': 'application/json',
                              'Authorization': adminToken
                            }
                          });
                          
                          if (!response.ok) {
                            throw new Error('Failed to delete tournament');
                          }
                          
                          toast.success("הטורניר נמחק בהצלחה");
                          
                          router.push('/tournaments');
                        } catch (error) {
                          console.error('Error deleting tournament:', error);
                          toast.error("אירעה שגיאה במחיקת הטורניר");
                          setDeleteError("אירעה שגיאה במחיקת הטורניר. אנא נסה שנית.");
                        } finally {
                          setIsDeleting(false);
                        }
                      }}
                    >
                      {isDeleting ? (
                        <>
                          <div className="h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                          מוחק...
                        </>
                      ) : (
                        "כן, מחק"
                      )}
                    </Button>
                    <DialogClose asChild>
                      <Button type="button" variant="secondary">
                        ביטול
                      </Button>
                    </DialogClose>
                  </DialogFooter>
                </DialogContent>
              </Dialog>
            </>
          )}
        </div>
      </div>

      <Card className="border-2 border-blue-200 shadow-md hover:shadow-lg transition-all">
        <CardHeader className="bg-gradient-to-r from-blue-100 to-blue-50">
          <CardTitle className="text-xl text-blue-800">פרטי הטורניר</CardTitle>
          <CardDescription className="text-blue-600">{tournament.description}</CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4 pt-4">
          <div className="flex items-center gap-2 text-blue-700">
            <Calendar className="h-4 w-4 text-blue-500" />
            <span>
              {new Date(tournament.startDate).toLocaleDateString("he-IL")} -{" "}
              {tournament.endDate ? new Date(tournament.endDate).toLocaleDateString("he-IL") : "לא נקבע"}
            </span>
          </div>
          <div className="flex items-center gap-2 text-blue-700">
            <MapPin className="h-4 w-4 text-blue-500" />
            <span>{tournament.location || "לא צוין מיקום"}</span>
          </div>
          <div className="flex items-center gap-2 text-blue-700">
            <Trophy className="h-4 w-4 text-blue-500" />
            <span>{getFormatLabel(tournament.format)}</span>
          </div>
          <div className="flex items-center gap-2 text-blue-700 md:col-span-3">
            <Users className="h-4 w-4 text-blue-500" />
            <span>
              {tournament.players.length} / 8 שחקנים
            </span>
            {tournament.players.length < 8 && tournament.status !== "completed" && isAdmin && (
              <Link href={`/tournaments/${tournament.id}/players/add`} className="mr-auto">
                <Button size="sm" variant="outline" className="gap-1 border-blue-300 text-blue-700 hover:bg-blue-100">
                  <Plus className="h-3.5 w-3.5" />
                  הוסף שחקנים
                </Button>
              </Link>
            )}
          </div>
        </CardContent>
      </Card>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-2 lg:w-auto lg:inline-flex">
          <TabsTrigger value="matches">משחקים</TabsTrigger>
          <TabsTrigger value="players">שחקנים</TabsTrigger>
          {tournament && tournament.status === "completed" && (
            <TabsTrigger value="standings">דירוג</TabsTrigger>
          )}
        </TabsList>

        <TabsContent value="matches" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-semibold text-blue-700">משחקים</h2>
            {tournament.status !== "completed" && isAdmin && (
              <Link href={`/tournaments/${tournament.id}/matches/new`}>
                <Button size="sm" className="gap-1 bg-green-500 hover:bg-green-600 text-white">
                  <Plus className="h-3.5 w-3.5" />
                  הוסף משחק
                </Button>
              </Link>
            )}
          </div>
          
          {tournament && tournament.format === 'groups_knockout' ? (
            // תצוגה מיוחדת לפורמט בתים + נוק-אאוט
            <div className="space-y-8">
              {/* משחקי הבתים */}
              <div className="bg-blue-50 p-4 rounded-lg border-2 border-blue-200 shadow-md">
                <h3 className="text-lg font-bold text-blue-800 mb-4">שלב הבתים</h3>
                
                {/* חלוקה לפי בתים */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {Array.from(new Set(tournament.matches
                    .filter(match => match.stage === 'group')
                    .map(match => match.groupName)))
                    .filter(Boolean)
                    .sort()
                    .map(groupName => (
                      <div key={groupName} className="bg-white p-4 rounded-lg border border-blue-200 shadow-sm">
                        <h4 className="text-md font-bold text-blue-700 mb-3 border-b pb-2">{groupName}</h4>
                        
                        {/* משחקי הבית */}
                        <div className="space-y-3">
                          {tournament.matches
                            .filter(match => match.stage === 'group' && match.groupName === groupName)
                            .sort((a, b) => {
                              // סידור לפי סטטוס (קודם משחקים שהסתיימו) ואז לפי תאריך
                              if (a.status === 'completed' && b.status !== 'completed') return -1;
                              if (a.status !== 'completed' && b.status === 'completed') return 1;
                              return new Date(a.date || 0).getTime() - new Date(b.date || 0).getTime();
                            })
                            .map(match => {
                              const p1 = tournament.players.find(p => p.id === match.player1Id);
                              const p2 = tournament.players.find(p => p.id === match.player2Id);
                              const winner = match.status === "completed" && match.player1Score !== null && match.player2Score !== null
                                ? match.player1Score > match.player2Score ? 1 : 2 
                                : 0;
                              
                              return (
                                <Link 
                                  href={`/matches/${match.id}`} 
                                  key={match.id} 
                                  className="block p-3 border rounded-lg hover:bg-blue-50 transition-colors"
                                >
                                  <div className="flex justify-between items-center">
                                    <div className="flex items-center gap-2">
                                      <div className={`flex items-center ${winner === 1 ? "font-bold text-blue-700" : ""}`}>
                                        {p1?.name || "שחקן 1"}
                                      </div>
                                      <span className="text-gray-500 mx-1">vs</span>
                                      <div className={`flex items-center ${winner === 2 ? "font-bold text-blue-700" : ""}`}>
                                        {p2?.name || "שחקן 2"}
                                      </div>
                                    </div>
                                    <div className="flex items-center gap-1">
                                      {match.status === "completed" ? (
                                        <span className="font-bold">
                                          {match.player1Score} - {match.player2Score}
                                        </span>
                                      ) : (
                                        <Badge variant="outline" className="text-xs">
                                          {match.status === "scheduled" ? "מתוכנן" : "בתהליך"}
                                        </Badge>
                                      )}
                                    </div>
                                  </div>
                                </Link>
                              );
                            })}
                        </div>
                        
                        {/* טבלת דירוג הבית */}
                        <div className="mt-4 pt-3 border-t">
                          <h5 className="text-sm font-bold text-blue-600 mb-2">דירוג הבית</h5>
                          <table className="w-full text-sm">
                            <thead>
                              <tr className="bg-blue-50">
                                <th className="py-1 px-2 text-right">#</th>
                                <th className="py-1 px-2 text-right">שחקן</th>
                                <th className="py-1 px-2 text-center">נצ'</th>
                                <th className="py-1 px-2 text-center">הפ'</th>
                                <th className="py-1 px-2 text-center">הפרש</th>
                                <th className="py-1 px-2 text-center">נק'</th>
                                <th className="py-1 px-2 text-center">דירוג</th>
                              </tr>
                            </thead>
                            <tbody>
                              {tournament.players
                                .filter(player => {
                                  // בדיקה אם השחקן שייך לבית הזה
                                  return tournament.matches.some(m => 
                                    m.stage === 'group' && 
                                    m.groupName === groupName && 
                                    (m.player1Id === player.id || m.player2Id === player.id)
                                  );
                                })
                                .map(player => {
                                  // חישוב סטטיסטיקות השחקן בבית הזה
                                  const groupMatches = tournament.matches.filter(m => 
                                    m.stage === 'group' && 
                                    m.groupName === groupName && 
                                    (m.player1Id === player.id || m.player2Id === player.id) &&
                                    m.status === 'completed'
                                  );
                                  
                                  const wins = groupMatches.filter(m => 
                                    (m.player1Id === player.id && m.player1Score !== null && m.player2Score !== null && m.player1Score > m.player2Score) ||
                                    (m.player2Id === player.id && m.player1Score !== null && m.player2Score !== null && m.player2Score > m.player1Score)
                                  ).length;
                                  
                                  const losses = groupMatches.filter(m => 
                                    (m.player1Id === player.id && m.player1Score !== null && m.player2Score !== null && m.player1Score < m.player2Score) ||
                                    (m.player2Id === player.id && m.player1Score !== null && m.player2Score !== null && m.player2Score < m.player1Score)
                                  ).length;
                                  
                                  // חישוב נקודות שהושגו ונקודות שספג
                                  let pointsFor = 0;
                                  let pointsAgainst = 0;
                                  
                                  groupMatches.forEach(m => {
                                    if (m.player1Id === player.id) {
                                      pointsFor += m.player1Score || 0;
                                      pointsAgainst += m.player2Score || 0;
                                    } else {
                                      pointsFor += m.player2Score || 0;
                                      pointsAgainst += m.player1Score || 0;
                                    }
                                  });
                                  
                                  return {
                                    player,
                                    wins,
                                    losses,
                                    points: wins * 3,
                                    played: wins + losses,
                                    pointsFor,
                                    pointsAgainst,
                                    pointsDiff: pointsFor - pointsAgainst
                                  };
                                })
                                .sort((a, b) => {
                                  // מיון לפי נקודות
                                  if (a.points !== b.points) return b.points - a.points;
                                  
                                  // אם יש שוויון בנקודות, מיון לפי הפרש נקודות
                                  if (a.pointsDiff !== b.pointsDiff) return b.pointsDiff - a.pointsDiff;
                                  
                                  // אם גם הפרש הנקודות שווה, בדיקת מפגש ישיר
                                  const directMatch = tournament.matches.find(match => 
                                    match.stage === 'group' && 
                                    match.groupName === groupName &&
                                    match.status === 'completed' && 
                                    ((match.player1Id === a.player.id && match.player2Id === b.player.id) || 
                                     (match.player1Id === b.player.id && match.player2Id === a.player.id))
                                  );
                                  
                                  if (directMatch) {
                                    // בדיקה מי ניצח במפגש הישיר
                                    if (directMatch.player1Id === a.player.id) {
                                      return (directMatch.player1Score || 0) > (directMatch.player2Score || 0) ? -1 : 1;
                                    } else {
                                      return (directMatch.player2Score || 0) > (directMatch.player1Score || 0) ? -1 : 1;
                                    }
                                  }
                                  
                                  // אם אין מפגש ישיר או שהוא לא הסתיים, השוואה לפי נקודות שהושגו
                                  return b.pointsFor - a.pointsFor;
                                })
                                .map((stats, index) => (
                                  <tr key={stats.player.id} className={index % 2 === 0 ? "" : "bg-gray-50"}>
                                    <td className="py-1 px-2 text-right">{index + 1}</td>
                                    <td className="py-1 px-2 text-right font-medium">{stats.player.name}</td>
                                    <td className="py-1 px-2 text-center text-green-600">{stats.wins}</td>
                                    <td className="py-1 px-2 text-center text-red-600">{stats.losses}</td>
                                    <td className="py-1 px-2 text-center text-blue-600">{stats.pointsDiff > 0 ? '+' : ''}{stats.pointsDiff}</td>
                                    <td className="py-1 px-2 text-center font-bold">{stats.points}</td>
                                    <td className="py-1 px-2 text-center">
                                      <div className="flex items-center justify-center gap-1">
                                        <Star className="h-3 w-3 text-yellow-500" />
                                        <span className="font-medium">{stats.player.rating}</span>
                                      </div>
                                    </td>
                                  </tr>
                                ))}
                            </tbody>
                          </table>
                        </div>
                      </div>
                    ))}
                </div>
              </div>
              
              {/* משחקי הנוק-אאוט */}
              {tournament.matches.some(match => match.stage === 'knockout') && (
                <div className="bg-green-50 p-4 rounded-lg border-2 border-green-200 shadow-md">
                  <h3 className="text-lg font-bold text-green-800 mb-4">שלב הנוק-אאוט</h3>
                  
                  <div className="overflow-x-auto">
                    <div className="min-w-[800px] p-4">
                      <div className="flex justify-around">
                        {/* סיבובים */}
                        {Array.from(new Set(tournament.matches
                          .filter(match => match.stage === 'knockout')
                          .map(m => m.round)))
                          .sort((a, b) => a - b)
                          .map((round, roundIndex) => {
                            const roundMatches = tournament.matches.filter(m => m.stage === 'knockout' && m.round === round);
                            const maxRound = Math.max(...tournament.matches
                              .filter(match => match.stage === 'knockout')
                              .map(m => m.round));
                            
                            return (
                              <div 
                                key={`round-${round}`} 
                                className="flex flex-col gap-8 items-center"
                              >
                                <h4 className="text-lg font-bold text-green-700 mb-2">
                                  {round === maxRound
                                    ? "גמר" 
                                    : round === maxRound - 1 
                                    ? "חצי גמר" 
                                    : round === maxRound - 2
                                    ? "רבע גמר"
                                    : `סיבוב ${round}`}
                                </h4>
                                
                                {roundMatches.map(match => {
                                  const p1 = tournament.players.find(p => p.id === match.player1Id);
                                  const p2 = tournament.players.find(p => p.id === match.player2Id);
                                  const winner = match.status === "completed" && match.player1Score !== null && match.player2Score !== null
                                    ? match.player1Score > match.player2Score ? 1 : 2 
                                    : 0;
                                  
                                  return (
                                    <Link
                                      href={`/matches/${match.id}`}
                                      key={match.id} 
                                      className={`block p-3 border-2 ${winner === 1 ? "border-t-green-400" : winner === 2 ? "border-b-green-400" : "border-gray-200"} rounded-lg bg-white shadow-sm min-w-[220px] hover:shadow-md transition-shadow`}
                                    >
                                      <div className={`flex items-center p-2 rounded-t ${winner === 1 ? "bg-green-100" : ""}`}>
                                        <span className="font-medium flex-1 truncate">{p1?.name || "שחקן 1"}</span>
                                        <span className={`
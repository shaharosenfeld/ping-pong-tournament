// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id           String   @id @default(uuid())
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  status       String   @default("draft") // draft, active, completed
  format       String   @default("knockout") // knockout, league, groups_knockout
  maxPlayers   Int      @default(8)
  rounds       Int      @default(1) // 1 for single, 2 for double (used in both knockout and league formats)
  groupCount   Int?     // Number of groups for groups_knockout format
  advanceCount Int?     // Number of players advancing from each group
  location     String?
  price        Float?   // מחיר השתתפות בטורניר
  firstPlacePrize  String?  // פרס למקום ראשון
  secondPlacePrize String?  // פרס למקום שני
  bitPaymentPhone  String?  // מספר טלפון לתשלום באמצעות ביט
  bitPaymentName   String?  // שם המוטב לתשלום ביט
  registrationOpen Boolean @default(false) // האם ההרשמה פתוחה
  registrationDeadline DateTime? // תאריך אחרון להרשמה
  players      Player[]
  matches      Match[]
  registrations TournamentRegistration[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Player {
  id        String   @id @default(uuid())
  name      String
  email     String?
  phone     String?
  avatar    String?
  level     Int      @default(1)
  bio       String?
  rating    Int      @default(1000)
  wins      Int      @default(0)
  losses    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tournaments     Tournament[]
  matchesAsPlayer1 Match[]     @relation("Player1")
  matchesAsPlayer2 Match[]     @relation("Player2")
  registrations   TournamentRegistration[]
}

model Match {
  id          String    @id @default(uuid())
  tournamentId String
  tournament  Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  player1Id   String
  player2Id   String
  player1     Player    @relation("Player1", fields: [player1Id], references: [id])
  player2     Player    @relation("Player2", fields: [player2Id], references: [id])
  
  player1Score Int?
  player2Score Int?
  
  round       Int       @default(1)
  status      String    @default("scheduled") // scheduled, in_progress, completed
  
  date        DateTime?
  
  stage       String?   // group, knockout
  groupName   String?   // for group stage matches
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([tournamentId])
  @@index([player1Id])
  @@index([player2Id])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String   // tournament, match, player, system
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TournamentRegistration {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // פרטי המשתמש שנרשם
  name             String
  email            String
  phone            String
  
  // קישור לטורניר
  tournamentId     String
  tournament       Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  
  // קישור לשחקן
  playerId         String
  player           Player     @relation(fields: [playerId], references: [id])
  
  // פרטי תשלום
  paymentMethod    String    @default("bit") // bit, cash, etc
  paymentStatus    String    @default("pending") // pending, paid, failed, etc
  paymentReference String?
  registrationDate DateTime  @default(now())
  
  // סטטוס אישור מנהל
  isApproved       Boolean   @default(false)
  
  @@index([tournamentId])
  @@index([email, phone])
  @@unique([tournamentId, playerId])
}


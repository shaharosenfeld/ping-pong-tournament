generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tournament {
  id                   String                   @id @default(uuid())
  name                 String
  description          String?
  startDate            DateTime
  endDate              DateTime?
  status               String                   @default("draft")
  format               String                   @default("knockout")
  maxPlayers           Int                      @default(8)
  rounds               Int                      @default(1)
  groupCount           Int?
  advanceCount         Int?
  location             String?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  price                Float?
  registrationDeadline DateTime?
  registrationOpen     Boolean                  @default(false)
  bitPaymentName       String?
  bitPaymentPhone      String?
  firstPlacePrize      String?
  secondPlacePrize     String?
  matches              Match[]
  registrations        TournamentRegistration[]
  players              Player[]                 @relation("PlayerToTournament")
}

model Player {
  id               String                   @id @default(uuid())
  name             String
  email            String?
  phone            String?
  avatar           String?
  level            Int                      @default(1)
  bio              String?
  rating           Int                      @default(1000)
  wins             Int                      @default(0)
  losses           Int                      @default(0)
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  matchesAsPlayer1 Match[]                  @relation("Player1")
  matchesAsPlayer2 Match[]                  @relation("Player2")
  registrations    TournamentRegistration[]
  tournaments      Tournament[]             @relation("PlayerToTournament")
}

model Match {
  id           String     @id @default(uuid())
  tournamentId String
  player1Id    String
  player2Id    String
  player1Score Int?
  player2Score Int?
  round        Int        @default(1)
  stage        String?
  groupName    String?
  status       String     @default("scheduled")
  date         DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  player1      Player     @relation("Player1", fields: [player1Id], references: [id])
  player2      Player     @relation("Player2", fields: [player2Id], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@index([tournamentId])
  @@index([player1Id])
  @@index([player2Id])
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TournamentRegistration {
  id               String       @id @default(cuid())
  tournamentId     String
  playerId         String
  paymentStatus    String       @default("pending")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  email            String
  isApproved       Boolean      @default(false)
  name             String
  paymentMethod    String       @default("bit")
  paymentReference String?
  phone            String
  registrationDate DateTime     @default(now())
  player           Player       @relation(fields: [playerId], references: [id])
  tournament       Tournament   @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  transactions     Transaction[] @relation("RegistrationTransactions")

  @@unique([tournamentId, playerId])
  @@index([tournamentId])
  @@index([email, phone])
}

model Transaction {
  id                     String                @id @default(cuid())
  registrationId         String
  amount                 Float
  currency               String                @default("ILS")
  status                 String                @default("pending") // pending, completed, failed, refunded
  paymentMethod          String
  paymentReference       String?
  externalTransactionId  String?
  notes                  String?
  evidenceUrl            String?               // For payment screenshot uploads
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  completedAt            DateTime?
  processedByAdminId     String?
  registration           TournamentRegistration @relation("RegistrationTransactions", fields: [registrationId], references: [id], onDelete: Cascade)
  
  @@index([registrationId])
  @@index([status])
}
